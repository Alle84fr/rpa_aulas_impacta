#                     _______________________________________________________________
#                     |                                                             |
#                     |             FUN√á√ÉO CAPTURA TELA USU√ÅRIO DIGITANDO           |
#                     |_____________________________________________________________|

import pyautogui
import time 
from pynput import keyboard
# resolvi usar m√©todo de tecla e n√£o bot√£o mouse por achar que btn do mouse √© muito usado
import sys
import io


# ___________________ CARACTERE ESPECIAL

# std = standard/ fluxo, canal PADR√ÉO 
# out = Output - sa√≠da padr√£o no qual o programa envia dados
# ex: print
# destino = vai para tecla/console
# extra para registrar - in = Input -entrada, ex: input, vem, origem do teclado
# extra para registrar - err = Error - mensagens de erros e diagn√≥sticos, destino tecla/console em um canal separado

# salvando_stdout_restauro = sys.stdout
# sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")

# ___________________ VERIFICA SE A √öLTIMA TECLA FOI P

# s√≥ ser√° tirado print quando usu√°rio der p + enter

p_para_enter_print = False 

# ___________________ FUN√á√ÉO BOT√ÉO E GERAL ____________________________

# hasattr = fun√ß√£o, booleana, que verifica o atributo ou m√©todo do objeto
# char √© o atributo das keys com caracteres vis√≠veis como letras,, n¬∞s, espa√ßo e enter
# sys - m√≥dulo do sistema que  fornece acesso a vari√°veis e fun√ß√µes que interagem com o interpretador
# flush() - obrigada o conte√∫do a ser "escrito" imediatamente, depois que o write enviar a mensagem, o flush mostra na tela a imagem
    
def btn_p_print(key):
    
    """Fun√ß√£o que ir√° chamar pynput ("input") - que verificar√° se a ultima tecla pressionada foi o p.
    com a jun√ß√£o do enter o usu√°rio poder√° tirar um print"""
    
    global p_para_enter_print
    
    try:
        """ verifica se foi char (caractere) √© string ou n¬∞, se for true e p entra em processo de espera para enter,
        se n√£o for ou n√£o ter enter sai do estado de espera"""
        
        # se a o atributo for tecla/key char, o P ser√° igual a p, a vari√°vel de verifica√ß√£o ser√° True, mensagem de comando, print na tela
        
        if hasattr(key, "char"):
            if key.char.lower() == "p":
                p_para_enter_print = True
                sys.__stdout__.write("\nüëâ P + ENTER üëà para tirar üì∏ da tela")
                sys.__stdout__.flush()
            else:
                p_para_enter_print = False
                
       # se for enter, se √∫ltima key for p, gera print
        elif key == keyboard.Key.enter:
            if p_para_enter_print:
                printando = pyautogui.screenshot()
                intervalo = time.strftime("%d-%b-%Y")
                nome_print = f"Print_tela_{intervalo}.png"
                printando.save(nome_print)
    
                # ___________________ MESAGEM E IMAGEM PARA USU√ÅRIO
    
                # sys - m√≥dulo do sistema que  fornece acesso a vari√°veis e fun√ß√µes que interagem com o interpretador
                # flush() - obrigada o conte√∫do a ser "escrito" imediatamente, depois que o write enviar a mensagem, o flush mostra na tela a imagem
                # lembrar de retornar "p" para falso
                
                sys.__stdout__.write(f"\n print {nome_print} salvo")
                sys.__stdout__.flush()
                p_para_enter_print = False
            
            else:
                p_para_enter_print = False
                # se n√£o teve p, n√£o tem professo "p"
                
        else:
            # n√£o foi p e enter
            p_para_enter_print = False
     
    except AttributeError:
        # para outra tecla se n√£o enter, fora do char visivel, ex: shift, ctrl, alt
        if key != keyboard.Key.enter:
            p_para_enter_print = False
        
        # se for alguma key fora das listadas, apenas segue o bloco
        pass

# ___________________ FUN√á√ÉO BOT√ÉO FINALIZAR ____________________________

def finalizar_print (key):
    
    """ Fun√ß√£o para parar o ciclo da fun√ßao btn_p_prin, que ser√° ao dar clic em ESC """
    
    if key == keyboard.Key.esc:
        # se a tecla/key for igual a tecla do eclado esc
        sys.__stdout__.write("\nüëâ ESC üëà para ‚ùå finalizar ")
        sys.__stdout__.flush()
        return False
    
# ___________________ MAIN__________________ ____________________________

sys.__stdout__.write("\nüëâ P + ENTER üëà para tirar üì∏ da tela")
sys.__stdout__.write("üëâ ESC üëà para ‚ùå finalizar\n")
sys.__stdout__.flush()

# ___________________ DEIXA PROGRAMA ATIVO, ESPERANDOS SER CHAMADO

# Listener = ouvinte, captura de evento, no caso captura do teclado
# join =  mant√©m programa tivo, esperandos ser chamado
# S√≥ fecha o ciclo quando for False/ clicl no ESC

with keyboard.Listener(on_press= btn_p_print, on_release=finalizar_print) as Listener:
    Listener.join()
    
sys.__stdout__.write("\nFun√ß√£o finaliza\n")
sys.__stdout__.flush()

# restaurar para estado inicial

sys.stdout = salvando_stdout_restauro
